package mperry

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So 
 * the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten 
 * terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 */

object P12 {

  def p = {
    val i = triangularSeq.map(factors _).find(_.size > 500)
    i match {
      case None => println("none")
      case Some(x) =>
        println("triNum = " + x.last + " list = " + x)
        assert(x.last == 76576500)
    }
  }

  def tri(i: Int): Int = {
    (1 to i).foldLeft(0)(_ + _)
  }

  val triangularSeq: Stream[Int] = {
    Stream.from(1).map(x => tri(x))
  }

  def factors(n: Int): List[Int] = {
    val r = math.sqrt(n).toInt
    val s = for (i <- 1 to r; if (n % i == 0)) yield List(i, n / i)
    List.flatten(s.toList).toSet.toList.sort(_ < _)
  }

}
